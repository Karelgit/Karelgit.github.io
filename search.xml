<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>做了个梦</title>
    <url>/2020/03/28/dreamviewer/</url>
    <content><![CDATA[<blockquote>
<p>2020-03-28 做了个梦，感觉有点意思，把它记录下来</p>
</blockquote>
<p>​       在我30多岁这一年的这一天，我一个以前的同事，把中小学课程通过盗版渠道成立了一个在线教育和直播平台，居然做成了全国的规范。中午他又和同事因为处事方式的激进和不可调和，在办公园区大打出手，脸上挂红，其实我和他已经好几年没有联系了，很大原因也是因为他的脾气确实也是烂得没话说。 <a id="more"></a>平时虽然我和他在一个城市，我都懒得和他打交道，确实人格令人讨厌，但是今天他找到了我，我还是憋着不快听了他和我抱怨他同事怎么不尊重他为他们企业的付出，作为一个新人如何对他指点江山，这让他蒙羞。因为他确实把一个烂App做成全国平台，实际意义的公司创始人。所以，虽然一大把年纪了，他也动手了！狠狠地揍了这个小屁孩。因为今天是工作日，中午看到他脸上挂红，我才勉强受邀过来听他瞎扯的。现在穿过他住的地方，他现在算存了不少钱了，但是还住在城中村，这和他守财奴的性格还真是他娘的配的一脸。我和他穿过了通勤的羊肠小道，傍边有卖油炸粑粑的，炸洋芋的，各种生意的妇人摆着小摊生意的家伙什，小矮凳，一个生火用的小炉子，上面一口装着贩卖产品的小锅，有赶集时候的烟火气。我们穿过了这些，合中午3点钟左右，分道扬镳了，他去他早上刚挂完彩的公司上班，我也开始去上班了，这么多年来在自己专业领域的辛勤专研，似乎现在晚一点上班，其实并不会让我自己在人们心里面的权威有任何影响。就在这个时候，前不搭村后不搭店的来了一个越野车，车里坐满了拿着开荒工具的各种人，充满了在历史书里看到古早时期去美洲淘金热的场景，我不自觉鬼使神差地上了那一趟车，跟着同伙都觉着，是很好的投资机会在邀请自己，傻兮兮地被介绍到一个我都并不熟悉的南美城市，危地马拉，到达地全是热带的景观和遮天蔽日的绿林，后来我是才知道被商人当做农奴贩卖到这这里，时间过去一天又一天，终于环境，我下面的描述，开启沉浸视角，你肯定能领会一二，在一片开阔地上，我正在坐着被强迫做的工作，割橡胶、除除草之类的吧，这片开阔地是热带雨林边上灌木、野草杂生的地方，我累了，两颊汗如雨注的咸汗，端视了这个我已经因为忘记了什么原因，主动投入进来的牢笼，已经十多二十年了，这逼近天际线的远方密林，对于热爱自然的我来说，居然有这不尽的压迫感，天空只露出比一线天景观多了那么一点的位置，其他的都被茂密伫立的绿油油和潮湿多蚊虫的密林直接和天际线连接，虽然我热爱植物，热爱自然，也提不起对这里爱的感受，就算我站立在很宽的灌木丛大阔地上，远方的密林仍然让我感觉到这个世界的另外一头发生了平面的卷积，正在卷向我，我就像小时候印象里被夏天凉席从一头卷向自己的感觉，但是，这次是另一边的地球地平线卷向我，我也不知道这种奴役的生活还有多久，似乎我已经习惯了我是这片土地的一员，已经被这里的草木同化，不再有浓烈的离开的愿望，完全忘记了地球的哪一头我的父亲母亲和妹妹，已经快20年过去了，我竟然这么自然地接受了偶然事故造成的我们远离！</p>
<p>​		倏尔，起火了，我看见向我卷积的热带雨林带着炙烤的温度，像太阳表面发生巨变的耀斑的火球，点缀着束缚我快20年的这片密林，真的越来热了，它真在卷向我，时不时有人从还未被，或者已经被卷进去的地平线的卷积面冲了出来，有身上已经着火的，有身上没有着火的，一阵狼嚎哭喊，全冲了出来，不仅有平时一起的劳工，还有属于这边土地，享受这人民奉养的土地拥有者，全出来了，往地球的另一端逃离。我心里也害怕极了，掉过头来，往地球的另一头跑去，这次的火感觉和平时的火灾不一样，像是要把地球当成夏天凉席裹成一卷，然后生生烧光，我没命的跑，从地球的一头跑到了一头，从南美洲穿过无尽的连绵烧起来的地貌，可能过海的时候我也是游过来的，我也不知道这一切怎么产生，一直到亚洲，到了相距一个白昼时差的家乡，但是火依然不见视觉上的小，我小时候生长的地方，也着火了，这几年可能因为环境保护的倡议，和政府的富足，整个地球的植被都火速的恢复得非常非常好，好像这种绵密是为了起火时带动火势而产生的。我这是在想啥呢，应该不会有这种奇奇怪怪的逻辑，我和本地原住居民一起灭火，我已经离开这里二十年了，我看到旁边的人，两颊斑白，实在熟悉，但是因为这火势的迅猛和脑力的退化，已经没法一下子想起来是谁了，可能故乡人自带的亲切感亦不一定，有可能是因为这么土地味的亚洲面孔。我们拿着水管朝着火源猛喷，但是一点没用啊，感觉要烧干净一切才罢休的样子，我心里一直想着父亲母亲，我往家里赶，越往里面走，感觉被密林裹住的感觉就越发强烈，时不时还有水柱从密林的缝隙冲刷出来，应该是乡亲们在外围灭火喷的，我打开了们，看到了父亲躺在椅子上，这里虽然比平时热，但是看着不时有从包围这家的密林的缝隙间冲刷出来水柱，父亲感觉一点也不慌张，也完全体会不了我跑了半个地球回到这里喊他们撤离的焦急，“快走啊，这火不是开玩笑的，从来没见过怎么大的火，妈妈，快叫上爸爸一起走”，我说道。“不要怕，这个火等一会自己就停了，都这么大的人了，做事情还怎么慌里慌张，没点长进”！父亲不耐烦地回应我，我当然觉得很惊讶，但是管不了怎么多了，我问问父亲，妹妹呢？他说在她孩子爷爷奶奶家呢，对哦，我离开很久了，妹妹自然也成家立业了，不知道是不是和以前一起谈恋爱的那个男孩，父亲说是的。我费劲了心思，把父亲母亲接到了政府安排的避难的建筑里，随着时间的推移，慢慢地火也逐渐被政府和民众控制住了，天也渐渐黑了，我站在避难所的一角，大家都杂乱地各寻空地休息，这是一片还没开始办公用的建筑用地，建筑建的差不多了，都是水泥框架，没装什么墙面玻璃。这是这几十年基建过剩留下来的，这样的建筑还有很多。多到完全超出了生产力可以覆盖的地步，只能闲置了，不想却成了这次火灾天然的避难所。接着昏暗的灯光，时不时来了过来安顿的人，还有小时候一起长大的伙伴，都布满白发和杂乱的胡须了，我实在崩不住了，眼泪在眼睛里面打转，模糊得我都看不清昏黄灯光下继续走来的人，我擦干眼眶里面的泪水，继续和前来的一起长大的小伙伴相认，“XX，好久不见了，我是xxx，这么多年你跑哪儿了，老了老了”，“这不是xx吗，我是XXX啊，居然在这遇到你，等会让我媳妇弄点花生米，我们喝两口”，“好的好的，一定一定”，我回应道。我真的很久没有见过家乡里的人了，在这次地球快被吞灭的灾难后，我们居然相遇了，心里各种情绪翻滚，都不能连续地发出声来回应在场的很面生的老朋友。“你妹妹快到了”，父亲说道。</p>
<p>​		从斑驳，布满飞尘和火烧过的灰烬的外墙边上显露出三两个人影，一个老奶奶和一个40来岁的妇女，虽然说是妇女，着装打扮很得体，小脸，优雅，很精致的妆容还没有退去，脸上很白，可能是化妆的粉，也可能是被这大火吓到发白的样子，这个人的出现，我咽喉哽咽，感觉什么东西堵住了，虽然过了很多年，但是我知道是我妹妹，接着我的眼睛里被透明的液体再次充满到模糊，我已经不知道今天我是第几次被眼泪打满了眼眶，又极力表现出不动声色的尽量得体的样子，可心里面已经数不清具体的多少种情绪在翻滚了。“你妹妹这么多年一直在幼儿园里面教书，和小朋友相处得很好，就是和婆婆家关系不太行”，慢慢又接着说，“婆婆不满意，说她居然当着她的面在家里和一起来玩的朋友喝酒划拳，不成体统”，虽然我也不赞同这种独立不管他人的做法，但是都这个时代了，虽然不同意，但是内心其实没有太多的排斥的想法了，毕竟个人价值来自独立的思考和行为方式嘛，我一直这么认为的。况且她是我妹妹，再过分一点估计我也产生不出嫌弃她来迎合别人这些行为，可能是对它的爱大于别人吧。“你妹妹在网络上还很有名，经常发表她的行业文章和分享生活点滴，就是有个很孤单的名字，地球孤星，不知道什么原因，她不太轻易表达自己的看法”，旁边的大姐接着刚才母亲的吐槽继续说道。我不知道地球孤星这个网名表现的孤独感，是不是和我这个哥哥突然失踪有关系，我想多少有点关系，因为父亲母亲老了，但是哥哥却不知道哪里去了。我感觉我的眼眶已经装不完继续冒出来的泪水了。在我克制保持体面准备闭上眼睛把眼泪包裹起来的最后一刻，我看向了她，还是很精致的妆容，但是她已经闭上了眼睛，如注的泪水挂上了她闭着的双眼，眼眶边上的些许皱纹和妆容上的白色的粉、黑色眼线的妆混在了一起，感觉像一盆水泼到了父亲用墨汁写在地上的毛笔字上，眼眶局部有着和她的精致的妆容十分不和谐的杂乱，我想我会建议可以她把地球孤星这个名字给改了。</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>人文</category>
      </categories>
      <tags>
        <tag>人文</tag>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>《娱乐至死》读书笔记</title>
    <url>/2020/03/27/%E3%80%8A%E5%A8%B1%E4%B9%90%E8%87%B3%E6%AD%BB%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>灵活</title>
    <url>/2020/03/26/spring-cloud-gateway/</url>
    <content><![CDATA[<h3 id="异常处理的一头一尾"><a class="header-anchor" href="#异常处理的一头一尾">¶</a>异常处理的一头一尾</h3>
<p>​		在使用网关进行微服务管理的工程中，我们编写了包含鉴权、限流的解决方案，加在访问到业务代码API之前，下面进入流程：</p>
<p><img src="/images/loading.gif" data-original="main-frame.png" alt="项目访问控制"></p>
<center>网关控制流程图</center>
<p>​     <a id="more"></a>SpringCloud 的异常处理不同于SpringMVC或者SpringBoot下的全局异常处理,因为底层的处理器不同,具体代码层表现为继承的类不同，SpringCloud需要继承DefaultErrorWebExceptionHandler进行异常处理,，SpringMVC和SpringBoot通过@ControllerAdvice<code>和</code>@ExceptionHandler处理不同的自定义异常处理逻辑。</p>
<img src="/images/loading.gif" data-original="/2020/03/26/spring-cloud-gateway/project-layout.png" class="project-layout" width="300" height="40">
<center>项目结构图</center>
<h4 id="全局异常处理："><a class="header-anchor" href="#全局异常处理：">¶</a>全局异常处理：</h4>
<p>Order：@Order(Ordered.HIGHEST_PRECEDENCE)</p>
<p>进入全局异常处理类ErrorHandlerConfiguration</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>({ServerProperties<span class="class">.<span class="keyword">class</span>, <span class="title">ResourceProperties</span>.<span class="title">class</span>})</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ErrorHandlerConfiguration</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerProperties serverProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ResourceProperties resourceProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ErrorHandlerConfiguration</span><span class="params">(ServerProperties serverProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     ResourceProperties resourceProperties,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     ObjectProvider&lt;List&lt;ViewResolver&gt;&gt; viewResolversProvider,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     ServerCodecConfigurer serverCodecConfigurer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     ApplicationContext applicationContext)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.serverProperties = serverProperties;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">        <span class="keyword">this</span>.resourceProperties = resourceProperties;</span><br><span class="line">        <span class="keyword">this</span>.viewResolvers = viewResolversProvider.getIfAvailable(Collections::emptyList);</span><br><span class="line">        <span class="keyword">this</span>.serverCodecConfigurer = serverCodecConfigurer;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Order</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorWebExceptionHandler <span class="title">errorWebExceptionHandler</span><span class="params">(ErrorAttributes errorAttributes)</span> </span>{</span><br><span class="line">        ExceptionHandler exceptionHandler = <span class="keyword">new</span> ExceptionHandler(</span><br><span class="line">                errorAttributes,</span><br><span class="line">                <span class="keyword">this</span>.resourceProperties,</span><br><span class="line">                <span class="keyword">this</span>.serverProperties.getError(),</span><br><span class="line">                <span class="keyword">this</span>.applicationContext);</span><br><span class="line">        exceptionHandler.setViewResolvers(<span class="keyword">this</span>.viewResolvers);</span><br><span class="line">        exceptionHandler.setMessageWriters(<span class="keyword">this</span>.serverCodecConfigurer.getWriters());</span><br><span class="line">        exceptionHandler.setMessageReaders(<span class="keyword">this</span>.serverCodecConfigurer.getReaders());</span><br><span class="line">        <span class="keyword">return</span> exceptionHandler;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>该类在容器初始化的时候首先加载，后面的加载顺序会在Order上有体现，在errorWebExceptionHandler里面实现自定义的ExceptionHandler,在经过了所有的过滤器之后，如果不在白名单（表示此类访问直接通过，不需要进行鉴权，会在下面讲到用户鉴权），异常返回自定义如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandler</span> <span class="keyword">extends</span> <span class="title">DefaultErrorWebExceptionHandler</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ResultFilter resultFilter;</span><br><span class="line"></span><br><span class="line">    ExceptionHandler(ErrorAttributes errorAttributes, ResourceProperties resourceProperties, ErrorProperties errorProperties, ApplicationContext applicationContext) {</span><br><span class="line">        <span class="keyword">super</span>(errorAttributes, resourceProperties, errorProperties, applicationContext);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取异常请求以及属性，构造相应的返回结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Map&lt;String, Object&gt; <span class="title">getErrorAttributes</span><span class="params">(ServerRequest request, <span class="keyword">boolean</span> includeStackTrace)</span> </span>{</span><br><span class="line">        String notFound = <span class="string">"404 NOT_FOUND"</span>;</span><br><span class="line"></span><br><span class="line">        Result result;</span><br><span class="line">        Throwable error = <span class="keyword">super</span>.getError(request);</span><br><span class="line">        <span class="keyword">if</span> (error <span class="keyword">instanceof</span> org.springframework.cloud.gateway.support.NotFoundException) {</span><br><span class="line">            <span class="comment">//请求经过了所有filter，如果不再在白名单需要减去用户调用次数</span></span><br><span class="line">            result = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"NULL_API"</span>));</span><br><span class="line">            returnCount(request);</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (notFound.equals(error.getMessage())) {</span><br><span class="line">            result = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"NULL_API"</span>));</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (error <span class="keyword">instanceof</span> java.net.UnknownHostException){</span><br><span class="line">            <span class="comment">//请求经过了所有filter，如果不在白名单需要减去用户调用次数</span></span><br><span class="line">            result = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"UNKNOW_HOST"</span>));</span><br><span class="line">            returnCount(request);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            result = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"INTERNAL_ERROR"</span>));</span><br><span class="line">            result.setData(result.getData() + <span class="string">"："</span> + error.toString() + <span class="string">":"</span> + error.getMessage());</span><br><span class="line">            error.printStackTrace();</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result.toMap();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">returnCount</span><span class="params">(ServerRequest request)</span></span>{</span><br><span class="line">        Boolean inWhiteList = request.exchange().getAttribute(<span class="string">"inWhiteList"</span>);</span><br><span class="line">        inWhiteList = inWhiteList == <span class="keyword">null</span> ? Boolean.FALSE : inWhiteList;</span><br><span class="line">        resultFilter.returnApiCount(request.exchange(), inWhiteList);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定响应处理方法为JSON处理的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> RouterFunction&lt;ServerResponse&gt; <span class="title">getRoutingFunction</span><span class="params">(ErrorAttributes errorAttributes)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> RouterFunctions.route(RequestPredicates.all(), <span class="keyword">this</span>::renderErrorResponse);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将返回的响应状态都设置为200</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> HttpStatus <span class="title">getHttpStatus</span><span class="params">(Map&lt;String, Object&gt; errorAttributes)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> HttpStatus.valueOf(HttpStatus.OK.value());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h4 id="返回值包装"><a class="header-anchor" href="#返回值包装">¶</a>返回值包装</h4>
<p>在正常返回之前结果之前，需要对用户访问总数等进行更新，调用ResultFilter对返回结果进行封装:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultFilter</span> <span class="keyword">implements</span> <span class="title">GlobalFilter</span>, <span class="title">Ordered</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> ModifyResponseBodyGatewayFilterFactory modifyResponseBodyGatewayFilterFactory;</span><br><span class="line">    <span class="keyword">private</span> GatewayFilter filter;</span><br><span class="line">    <span class="keyword">private</span> SyncCountTask syncCountTask;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResultFilter</span><span class="params">(ModifyResponseBodyGatewayFilterFactory modifyResponseBodyGatewayFilterFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                        RedisTemplate&lt;String, String&gt; redisTemplate,</span></span></span><br><span class="line"><span class="function"><span class="params">                        SyncCountTask syncCountTask)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.modifyResponseBodyGatewayFilterFactory = modifyResponseBodyGatewayFilterFactory;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.syncCountTask = syncCountTask;</span><br><span class="line">        filter = init();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">filter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>{</span><br><span class="line">        <span class="comment">//需要排除流（由于基于webFlux，modifyResponseBodyGatewayFilter结果需要阻塞流，因此需要单独处理）</span></span><br><span class="line">        String streamSign = <span class="string">"/stream/"</span>;</span><br><span class="line">        <span class="keyword">if</span> (exchange.getRequest().getPath().toString().contains(streamSign)) {</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> filter.filter(exchange, chain);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> NettyWriteResponseFilter.WRITE_RESPONSE_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> GatewayFilter <span class="title">init</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> modifyResponseBodyGatewayFilterFactory.apply(c -&gt; c.setRewriteFunction(String<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>, (<span class="title">serverWebExchange</span>, <span class="title">s</span>) -&gt; </span>{</span><br><span class="line">            serverWebExchange.getResponse().getHeaders().setContentType(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line"></span><br><span class="line">            Boolean inWhiteList = serverWebExchange.getAttribute(<span class="string">"inWhiteList"</span>);</span><br><span class="line">            inWhiteList = inWhiteList == <span class="keyword">null</span> ? Boolean.FALSE : inWhiteList;</span><br><span class="line"></span><br><span class="line">            HttpStatus statusCode = serverWebExchange.getResponse().getStatusCode();</span><br><span class="line">            Result result;</span><br><span class="line">            <span class="keyword">if</span> (statusCode == HttpStatus.OK) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Result serverResult = JSONObject.parseObject(s, Result<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                    <span class="keyword">if</span> (serverResult.getCode() == <span class="keyword">null</span> &amp;&amp; serverResult.getMessage() == <span class="keyword">null</span>) {</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                    }</span><br><span class="line">                    result = <span class="keyword">new</span> Result(serverResult.getData());</span><br><span class="line">                } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                    returnApiCount(serverWebExchange, inWhiteList);</span><br><span class="line">                    result = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"ERROR_RESULT"</span>));</span><br><span class="line">                    <span class="keyword">return</span> Mono.just(result.toString());</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//接口处理成功,提交后续操作</span></span><br><span class="line">                UserLimitEntity userLimitEntity = serverWebExchange.getAttribute(<span class="string">"userLimitEntity"</span>);</span><br><span class="line">                <span class="keyword">if</span> (!inWhiteList &amp;&amp; !userLimitEntity.notCountLimit()) {</span><br><span class="line">                    syncCountTask.sync(StringUtil.toMD5(serverWebExchange.getAttribute(<span class="string">"userId"</span>),</span><br><span class="line">                            serverWebExchange.getAttribute(<span class="string">"md5Path"</span>)));</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            } <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == HttpStatus.NOT_FOUND) {</span><br><span class="line">                returnApiCount(serverWebExchange, inWhiteList);</span><br><span class="line">                changeStatusCode(serverWebExchange, HttpStatus.OK);</span><br><span class="line">                result = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"UNSIGN_API"</span>));</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                Boolean isServerError = statusCode == <span class="keyword">null</span> || statusCode.is5xxServerError();</span><br><span class="line">                returnApiCount(serverWebExchange, inWhiteList);</span><br><span class="line">                changeStatusCode(serverWebExchange, HttpStatus.OK);</span><br><span class="line">                <span class="keyword">if</span> (isServerError) {</span><br><span class="line">                    result = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"ERROR_SERVER"</span>));</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    result = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"BAD_REQUEST"</span>));</span><br><span class="line">                }</span><br><span class="line">                String message = <span class="string">"服务异常"</span>;</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    JSONObject jsonObject = JSONObject.parseObject(s);</span><br><span class="line">                    message = jsonObject.getString(<span class="string">"message"</span>);</span><br><span class="line">                    String data = jsonObject.getString(<span class="string">"data"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (!StringUtils.isEmpty(data)) {</span><br><span class="line">                        message += <span class="string">"【"</span> + data + <span class="string">"】"</span>;</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">                    System.err.println(<span class="string">"接口"</span> + serverWebExchange.getRequest().getPath() + <span class="string">"异常结果不统一。异常为："</span> + s);</span><br><span class="line">                }</span><br><span class="line">                result.setData(result.getData() + <span class="string">"："</span> + message);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> Mono.just(result.toString());</span><br><span class="line">        }));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Number <span class="title">str2num</span><span class="params">(String str)</span> <span class="keyword">throws</span> NumberFormatException </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigInteger(str);</span><br><span class="line">        } <span class="keyword">catch</span> (NumberFormatException e) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BigDecimal(str);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnApiCount</span><span class="params">(ServerWebExchange exchange, <span class="keyword">boolean</span> inWhiteList)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (inWhiteList) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        UserLimitEntity userLimitEntity = exchange.getAttribute(<span class="string">"userLimitEntity"</span>);</span><br><span class="line">        <span class="keyword">if</span> (userLimitEntity.notCountLimit()) {</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        }</span><br><span class="line">        returnRedisCount(exchange);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">returnRedisCount</span><span class="params">(ServerWebExchange exchange)</span> </span>{</span><br><span class="line">        String redisPath = RedisPath.USER_COUNT_LIMIT + exchange.getAttribute(<span class="string">"userId"</span>);</span><br><span class="line">        String md5Path = exchange.getAttribute(<span class="string">"md5Path"</span>);</span><br><span class="line">        redisTemplate.opsForZSet().incrementScore(redisPath, md5Path, -<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeStatusCode</span><span class="params">(ServerWebExchange exchange, HttpStatus httpStatus)</span> </span>{</span><br><span class="line">        exchange.getResponse().setStatusCode(httpStatus);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<h3 id="filter过滤请求"><a class="header-anchor" href="#filter过滤请求">¶</a>filter过滤请求</h3>
<h4 id="用户权限的过滤器"><a class="header-anchor" href="#用户权限的过滤器">¶</a>用户权限的过滤器</h4>
<p>Order：Integer.MIN_VALUE</p>
<p>一头一尾简单说完，那中间经历了哪些filter的处理过程呢，根据bean的Order加载顺序，下一个我们进行的是用户的验证AuthFilter，Order：Integer.MIN_VALUE：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthFilter</span> <span class="keyword">implements</span> <span class="title">MyFilter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthFilter</span><span class="params">(RedisTemplate&lt;String, String&gt; redisTemplate)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">noPassFilter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>{</span><br><span class="line"></span><br><span class="line">        String path = exchange.getRequest().getPath().toString();</span><br><span class="line">        String md5Path = StringUtil.toMD5(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接口是否启用</span></span><br><span class="line">        Boolean exist = redisTemplate.opsForSet().isMember(RedisPath.ALL_URL, md5Path);</span><br><span class="line">        <span class="keyword">if</span> (exist == <span class="keyword">null</span> || !exist) {</span><br><span class="line">            Result nullApi = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"NULL_API"</span>));</span><br><span class="line">            <span class="keyword">return</span> ResponseUtil.newResponse(exchange, nullApi);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户是否有权限</span></span><br><span class="line">        List&lt;String&gt; accessTokenList = exchange.getRequest().getQueryParams().get(<span class="string">"accessToken"</span>);</span><br><span class="line">        <span class="keyword">if</span> (accessTokenList == <span class="keyword">null</span> || accessTokenList.size() &lt; <span class="number">1</span>) {</span><br><span class="line">            Result missToken = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"MISS_TOKEN"</span>));</span><br><span class="line">            <span class="keyword">return</span> ResponseUtil.newResponse(exchange, missToken);</span><br><span class="line">        }</span><br><span class="line">        String token = accessTokenList.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        String userId = redisTemplate.opsForValue().get(RedisPath.PERMISSION + token);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(userId)) {</span><br><span class="line">            Result expiredToken = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"EXPIRED_TOKEN"</span>));</span><br><span class="line">            <span class="keyword">return</span> ResponseUtil.newResponse(exchange, expiredToken);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            Map&lt;Object, Object&gt; permission = redisTemplate.opsForHash().entries(RedisPath.USER_INFO + userId);</span><br><span class="line">            Object obj = permission.get(md5Path);</span><br><span class="line">            <span class="keyword">if</span> (obj == <span class="keyword">null</span>) {</span><br><span class="line">                Result impermissibleApi = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"IMPERMISSIBLE_API"</span>));</span><br><span class="line">                <span class="keyword">return</span> ResponseUtil.newResponse(exchange, impermissibleApi);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                UserLimitEntity userLimitEntity = <span class="keyword">new</span> UserLimitEntity(obj.toString());</span><br><span class="line">                exchange.getAttributes().put(<span class="string">"userLimitEntity"</span>, userLimitEntity);</span><br><span class="line">                exchange.getAttributes().put(<span class="string">"userId"</span>, userId);</span><br><span class="line">                exchange.getAttributes().put(<span class="string">"md5Path"</span>, md5Path);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>接口是否启用，通过Key值RedisPath.ALL_URL从Redis里面获取所有已经存在的API，然后对1、token是否带入参数；2、token是否为空进行判断，如果都通过，通过userId在Redis里面查找用户限制鉴权对象UserLimitEntity，UserLimitEntity和RedisPath.ALL_URL的获取都存在从MySQL缓存至Redis的过程，在下面的类InitHandler进行加载。</p>
<p>Order：1</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitHandler</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(InitHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">    <span class="keyword">private</span> TokenBucketClient tokenBucketClient;</span><br><span class="line">    <span class="keyword">private</span> UrlMapper urlMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InitHandler</span><span class="params">(RedisTemplate&lt;String, String&gt; redisTemplate, TokenBucketClient tokenBucketClient, UrlMapper urlMapper)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">        <span class="keyword">this</span>.tokenBucketClient = tokenBucketClient;</span><br><span class="line">        <span class="keyword">this</span>.urlMapper = urlMapper;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        initEnum();</span><br><span class="line">        List&lt;Url&gt; urls = urlMapper.getAll();</span><br><span class="line">        initUrl(urls);</span><br><span class="line">        initUrlLimit(urls);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initEnum</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        LOG.info(<span class="string">"############ 枚举加载 开始 ############"</span>);</span><br><span class="line">        Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"FailureResult.properties"</span>);</span><br><span class="line">        InputStream is = resource.getInputStream();</span><br><span class="line">        BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">        String tmp;</span><br><span class="line">        Map&lt;String, Object[]&gt; enumValues = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">while</span> ((tmp = reader.readLine()) != <span class="keyword">null</span>) {</span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(tmp) &amp;&amp; tmp.trim().indexOf(<span class="string">"#"</span>) != <span class="number">0</span>) {</span><br><span class="line">                String[] nameAndCodeMsg = tmp.split(<span class="string">"="</span>);</span><br><span class="line">                String name = nameAndCodeMsg[<span class="number">0</span>].trim();</span><br><span class="line">                String cav = nameAndCodeMsg[<span class="number">1</span>].trim();</span><br><span class="line">                String code = cav.substring(<span class="number">0</span>, cav.indexOf(<span class="string">","</span>));</span><br><span class="line">                String msg = cav.substring(cav.indexOf(<span class="string">","</span>) + <span class="number">1</span>);</span><br><span class="line">                Object[] value = <span class="keyword">new</span> Object[<span class="number">2</span>];</span><br><span class="line">                value[<span class="number">0</span>] = Integer.parseInt(code.trim());</span><br><span class="line">                value[<span class="number">1</span>] = msg.trim();</span><br><span class="line">                enumValues.put(name, value);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        EnumUtil.addEnum(FailureResult.class, new Class[]{int.class, String.class}, enumValues);</span><br><span class="line">        LOG.info(<span class="string">"############ 枚举加载 结束 ############"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化所有的可用url</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUrl</span><span class="params">(List&lt;Url&gt; urls)</span> </span>{</span><br><span class="line">        LOG.info(<span class="string">"############ 缓存可用的URL到redis(共计:{}) 开始 ############"</span>, urls.size());</span><br><span class="line">        String[] urlArr = <span class="keyword">new</span> String[urls.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; urls.size(); i++) {</span><br><span class="line">            urlArr[i] = urls.get(i).getId();</span><br><span class="line">        }</span><br><span class="line">        Long result = redisTemplate.opsForSet().add(RedisPath.ALL_URL, urlArr);</span><br><span class="line">        LOG.info(<span class="string">"############ 缓存可用的URL到redis(初始化:{}) 结束 ############"</span>, result == <span class="keyword">null</span> ? <span class="number">0</span> : result);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有限制接口访问频率的接口，初始化redis中对应的令牌桶信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUrlLimit</span><span class="params">(List&lt;Url&gt; urls)</span> </span>{</span><br><span class="line">        LOG.info(<span class="string">"############ 初始化令牌桶(共计:{}) 开始 ############"</span>, urls.size());</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Url url : urls) {</span><br><span class="line">            <span class="keyword">if</span> (url.getBucketMaxSize() == <span class="number">0</span> || url.getQps() == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            tokenBucketClient.init(RedisPath.URL_LIMIT + url.getId(), url.getBucketMaxSize(), url.getQps());</span><br><span class="line">            total++;</span><br><span class="line">        }</span><br><span class="line">        LOG.info(<span class="string">"############ 初始化令牌桶(初始化:{}) 结束 ############"</span>, total);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>可以看出类InitHandler中方法initUrl()初始化了所有的存在的urls（即已经存在于数据库中的API）,缓存至Redis,我们看看Mysql视图:</p>
<p><img src="/images/loading.gif" data-original="mysql-url.png" alt=""></p>
<p>Redis视图(只缓存url的Id)：</p>
<p><img src="/images/loading.gif" data-original="redis-url.png" alt=""></p>
<p>initEnum()方法初始化返回值错误类型的枚举类加载，initUrlLimit()初始化url的令牌桶，至于令牌什么时候用，我们后面说。</p>
<h4 id="用户访问速度的过滤器"><a class="header-anchor" href="#用户访问速度的过滤器">¶</a>用户访问速度的过滤器</h4>
<p>Order：Integer.MIN_VALUE+1</p>
<p>下面进入用户访问速度的过滤器，这里用到了redis+Lua的控制逻辑，直接上代码：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRateFilter</span> <span class="keyword">implements</span> <span class="title">MyFilter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserRateClient userRateClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserRateFilter</span><span class="params">(UserRateClient userRateClient)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.userRateClient = userRateClient;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">noPassFilter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>{</span><br><span class="line"></span><br><span class="line">        UserLimitEntity userLimitEntity = exchange.getAttribute(<span class="string">"userLimitEntity"</span>);</span><br><span class="line">        <span class="keyword">if</span> (userLimitEntity.notRateLimit()) {</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        String userId = exchange.getAttribute(<span class="string">"userId"</span>);</span><br><span class="line">        String md5Path = exchange.getAttribute(<span class="string">"md5Path"</span>);</span><br><span class="line">        String redisPath = RedisPath.USER_RATE_LIMIT + userId + <span class="string">":"</span> + md5Path;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> acquire(redisPath,userLimitEntity.getRate(),exchange,chain);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Integer.MIN_VALUE + <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Mono&lt;Void&gt; <span class="title">acquire</span><span class="params">(String redisPath, Map&lt;Integer,Integer&gt; limitInfo,ServerWebExchange exchange, GatewayFilterChain chain)</span></span>{</span><br><span class="line">        LuaScriptResult acquire = userRateClient.acquire(redisPath);</span><br><span class="line">        <span class="keyword">if</span> (acquire == LuaScriptResult.NEED_INIT) {</span><br><span class="line">            userRateClient.init(redisPath, limitInfo);</span><br><span class="line">            acquire = userRateClient.acquire(redisPath);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (acquire == LuaScriptResult.SUCCESS) {</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (acquire == LuaScriptResult.LIMITED) {</span><br><span class="line">            Result frequentRequest = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"FREQUENT_REQUEST"</span>));</span><br><span class="line">            <span class="keyword">return</span> ResponseUtil.newResponse(exchange, frequentRequest);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"user limit acquire error"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>类UserRateFilte，如果不在类AuthFilter过滤器中的白名单，进入自定义的MyFilter noPassFilter()进入过滤器逻辑，其中UserLimitEntity，在上面提到的类InitHandler中，已经由用户管理系统(不用于此网关系统)Mysql缓存到Redis中，如图：</p>
<p><img src="/images/loading.gif" data-original="user-limit.png" alt=""></p>
<p>其中字段USED（已访问次数），TOTAL（总访问次数），RATE（访问速率），如：{60:10,3600:300}表示两个限制条件，此用户60秒最多可累计可访问10次，3600秒最多累计可访问300次，这个二元组个数可以根据需求随意添加。其中方法acquire()，将对用户限制的次数进行判断，并返回是否通过过滤，这里会由userRateClient加载user_rate_limit.lua对用户是否能够获取访问权限进行判断。先看看类userRateClient：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRateClient</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis脚本调用类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"userRateLua"</span>)</span><br><span class="line">    <span class="keyword">private</span> RedisScript&lt;Long&gt; userRateScript;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserRateClient</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuaScriptResult <span class="title">init</span><span class="params">(String path, Map&lt;Integer, Integer&gt; limit)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Integer max = <span class="number">0</span>;</span><br><span class="line">            StringBuilder intervalSb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            intervalSb.append(<span class="string">"{"</span>);</span><br><span class="line">            StringBuilder countSb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            countSb.append(<span class="string">"{"</span>);</span><br><span class="line">            <span class="keyword">for</span> (Integer key : limit.keySet()) {</span><br><span class="line">                max = max &gt; key ? max : key;</span><br><span class="line">                intervalSb.append(key * <span class="number">1000</span>).append(<span class="string">","</span>);</span><br><span class="line">                countSb.append(limit.get(key)).append(<span class="string">","</span>);</span><br><span class="line">            }</span><br><span class="line">            intervalSb.deleteCharAt(intervalSb.length() - <span class="number">1</span>).append(<span class="string">"}"</span>);</span><br><span class="line">            countSb.deleteCharAt(countSb.length() - <span class="number">1</span>).append(<span class="string">"}"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> exec(path, UserRateLimitMethod.init, intervalSb.toString(), countSb.toString(), String.valueOf(max), String.valueOf(limit.size()));</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> LuaScriptResult.ERROR;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuaScriptResult <span class="title">acquire</span><span class="params">(String path)</span> </span>{</span><br><span class="line">        LuaScriptResult exec = exec(path, UserRateLimitMethod.acquire);</span><br><span class="line">        <span class="keyword">return</span> exec;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> LuaScriptResult <span class="title">exec</span><span class="params">(String path, UserRateLimitMethod method, Object... params)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;String&gt;() {{</span><br><span class="line">                add(path);</span><br><span class="line">                add(method.name());</span><br><span class="line">            }};</span><br><span class="line">            Long result = redisTemplate.execute(userRateScript, keys, params);</span><br><span class="line">            <span class="keyword">return</span> LuaScriptResult.getResult(result);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> LuaScriptResult.ERROR;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>UserRateClient里面的exec(path, UserRateLimitMethod.init, intervalSb.toString(), countSb.toString(), String.valueOf(max), String.valueOf(limit.size())) 方法，intervalSb和countSb都封装成{毫秒数:可访问数}这种多个二元组的形式，@Qualifier(“userRateLua”)通过Spring Configuration加载lua脚本user_rate_limit.lua:</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">redis.replicate_commands()</span><br><span class="line"></span><br><span class="line">local method = KEYS[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">local curr_time_arr = redis.call(<span class="string">'TIME'</span>)</span><br><span class="line">local curr_time = curr_time_arr[<span class="number">1</span>] * <span class="number">1000</span> + math.floor(curr_time_arr[<span class="number">2</span>]/<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">local Result = {SUCCESS=<span class="number">1</span>,DEFEAT=<span class="number">0</span>,LIMITED=-<span class="number">1</span>,NEEDINIT=<span class="number">99</span>}</span><br><span class="line"></span><br><span class="line">local limit_info = redis.pcall(<span class="string">'HMGET'</span>,KEYS[<span class="number">1</span>],<span class="string">'interval'</span>,<span class="string">'max_count'</span>,<span class="string">'first_time'</span>,<span class="string">'count'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function">local function <span class="title">arr2str</span><span class="params">(arr)</span></span></span><br><span class="line"><span class="function">    local str </span>=  <span class="string">'{'</span></span><br><span class="line">    for i=1,#arr,1 do</span><br><span class="line">        str = str .. arr[i]</span><br><span class="line">        if i&lt;#arr then</span><br><span class="line">            str = str .. <span class="string">','</span></span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    <span class="keyword">return</span> str .. <span class="string">'}'</span></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> method == <span class="string">'init'</span> then</span><br><span class="line">    <span class="keyword">if</span>(type(limit_info[<span class="number">1</span>]) ~=<span class="string">'boolean'</span> and limit_info[<span class="number">1</span>] ~=nil) then</span><br><span class="line">        <span class="keyword">return</span> Result.DEFEAT</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    local curr_time_str = <span class="string">'{'</span></span><br><span class="line">    local count_str = <span class="string">'{'</span></span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">1</span>,ARGV[<span class="number">4</span>],<span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">        curr_time_str = curr_time_str .. curr_time</span><br><span class="line">        count_str = count_str .. <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; tonumber(ARGV[<span class="number">4</span>]) then</span><br><span class="line">            curr_time_str = curr_time_str .. <span class="string">','</span></span><br><span class="line">            count_str = count_str .. <span class="string">','</span></span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    curr_time_str = curr_time_str .. <span class="string">'}'</span></span><br><span class="line">    count_str = count_str .. <span class="string">'}'</span></span><br><span class="line"></span><br><span class="line">    redis.pcall(<span class="string">'HMSET'</span>, KEYS[<span class="number">1</span>],</span><br><span class="line">        <span class="string">'interval'</span>, ARGV[<span class="number">1</span>],</span><br><span class="line">        <span class="string">'max_count'</span>, ARGV[<span class="number">2</span>],</span><br><span class="line">        <span class="string">'first_time'</span>, curr_time_str,</span><br><span class="line">        <span class="string">'count'</span>, count_str)</span><br><span class="line">    redis.pcall(<span class="string">'EXPIRE'</span>,KEYS[<span class="number">1</span>],ARGV[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">return</span> Result.SUCCESS</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> method == <span class="string">'acquire'</span> then</span><br><span class="line">    <span class="keyword">if</span>(type(limit_info[<span class="number">1</span>]) ==<span class="string">'boolean'</span> or limit_info[<span class="number">1</span>] ==nil) then</span><br><span class="line">        <span class="keyword">return</span> Result.NEEDINIT</span><br><span class="line">    end</span><br><span class="line">    local interval = loadstring(<span class="string">'return '</span> .. limit_info[<span class="number">1</span>])()</span><br><span class="line">    local max_count = loadstring(<span class="string">'return '</span> .. limit_info[<span class="number">2</span>])()</span><br><span class="line">    local first_time = loadstring(<span class="string">'return '</span> .. limit_info[<span class="number">3</span>])()</span><br><span class="line">    local count = loadstring(<span class="string">'return '</span> .. limit_info[<span class="number">4</span>])()</span><br><span class="line"></span><br><span class="line">    for i=1,#interval,1 do</span><br><span class="line">        <span class="keyword">if</span> curr_time-first_time[i] &gt; interval[i] then</span><br><span class="line">            first_time[i] = curr_time</span><br><span class="line">            count[i] = <span class="number">0</span></span><br><span class="line">        end</span><br><span class="line">        <span class="keyword">if</span> count[i] &gt;= max_count[i] then</span><br><span class="line">            <span class="keyword">return</span> Result.LIMITED</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    for i=1,#interval,1 do</span><br><span class="line">        count[i] = count[i] + <span class="number">1</span></span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    redis.pcall(<span class="string">'HSET'</span>, KEYS[<span class="number">1</span>], <span class="string">'first_time'</span>, arr2str(first_time),<span class="string">'count'</span>,arr2str(count))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.SUCCESS</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure>
<p>如果不懂lua脚本语法，可以去网上先了解一下，作为redis分布式锁原子性实现的利器（redis官方推出的解决方案），在进行redis分布式锁设计的时候也可以大展拳脚，实际顺手程度非常推荐。说远了，回来到上面的lua脚本。init方法初始化用户限流的各项参数，interval-时间间隔，max_count-最大访问次数，first_time-第一次访问时间，count-置0，当然是实际是{0}样子，上面做了字符串的拼接，这是lua的数组包装形式，在acquire方法里面如果redis里面没有进行初始化的话就进行初始化，在Redis里面的视图是：</p>
<p><img src="/images/loading.gif" data-original="user-rate-limit.png" alt=""></p>
<p>acquire发现，如果当前时间减去第一次时间大于时间间隔，用户已使用次数count归0，并把curr_time（当前时间）赋值给first_time（第一次时间）,如果在这个时间间隔内，使用次数count+1，如果访问次数大于最大访问次数，返回Result.LIMITED，如果返回Result.SUCCESS，通过类UserRateFilter的过滤条件，进入下一个过滤器。</p>
<h4 id="接口访问速度的过滤器"><a class="header-anchor" href="#接口访问速度的过滤器">¶</a>接口访问速度的过滤器</h4>
<p>Order：Integer.MIN_VALUE+2</p>
<p>类UrlRateFilter是对接口访问速度的控制，代码如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlRateFilter</span> <span class="keyword">implements</span> <span class="title">MyFilter</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TokenBucketClient tokenBucketClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UrlRateFilter</span><span class="params">(TokenBucketClient tokenBucketClient)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.tokenBucketClient = tokenBucketClient;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">noPassFilter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>{</span><br><span class="line"></span><br><span class="line">        String md5Path = exchange.getAttribute(<span class="string">"md5Path"</span>);</span><br><span class="line">        LuaScriptResult acquire = tokenBucketClient.acquire(RedisPath.URL_LIMIT + md5Path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (acquire == LuaScriptResult.SUCCESS) {</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (acquire == LuaScriptResult.LIMITED) {</span><br><span class="line">            Result limitedApi = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"LIMITED_API"</span>));</span><br><span class="line">            <span class="keyword">return</span> ResponseUtil.newResponse(exchange, limitedApi);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"api limit acquire error"</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Integer.MIN_VALUE + <span class="number">2</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>调用TokenBucketClient进行控制逻辑，此处的逻辑和上面的用户访问控制有点区别，这里面的初始化，即令牌的初始化在类initHandler里面的initUrlLimit()方法已经初始化了，缓存至Redis如图：</p>
<p><img src="/images/loading.gif" data-original="url-limit.png" alt=""></p>
<p>里面参数表示：bucket_max_size（令牌桶里面最大令牌数），interval（产生令牌的时间间隔），token（token数），更新时间（timestamp）。关于令牌桶的概念，不清楚的话，可先查看<a href="https://segmentfault.com/a/1190000015967922" target="_blank" rel="noopener">令牌桶概念</a>、<a href="https://www.jianshu.com/p/864ddda9288f" target="_blank" rel="noopener">实现例子</a>。</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenBucketClient</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis客户端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis脚本调用类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"tokenBucketLua"</span>)</span><br><span class="line">    <span class="keyword">private</span> RedisScript&lt;Long&gt; rateLimitScript;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TokenBucketClient</span><span class="params">(StringRedisTemplate redisTemplate)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuaScriptResult <span class="title">init</span><span class="params">(String path, <span class="keyword">int</span> bucketMaxSize, <span class="keyword">int</span> qps)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> init(path,bucketMaxSize,getInterval(qps));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuaScriptResult <span class="title">init</span><span class="params">(String path, <span class="keyword">int</span> bucketMaxSize, <span class="keyword">float</span> interval)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> exec(path, TbRateLimitMethod.init, bucketMaxSize, interval, bucketMaxSize);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuaScriptResult <span class="title">modify</span><span class="params">(String path, <span class="keyword">int</span> bucketMaxSize, <span class="keyword">int</span> qps)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> modify(path, bucketMaxSize, getInterval(qps));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuaScriptResult <span class="title">modify</span><span class="params">(String path, <span class="keyword">int</span> bucketMaxSize, <span class="keyword">float</span> interval)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> exec(path, TbRateLimitMethod.modify, bucketMaxSize, interval);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuaScriptResult <span class="title">delete</span><span class="params">(String path)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> exec(path, TbRateLimitMethod.delete);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuaScriptResult <span class="title">acquire</span><span class="params">(String path)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> acquire(path, <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuaScriptResult <span class="title">acquire</span><span class="params">(String path, <span class="keyword">int</span> acquireToken)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> exec(path, TbRateLimitMethod.acquire, acquireToken);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> LuaScriptResult <span class="title">exec</span><span class="params">(String path, TbRateLimitMethod method, Object... params)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            String[] allParams = <span class="keyword">new</span> String[params.length + <span class="number">1</span>];</span><br><span class="line">            allParams[<span class="number">0</span>] = method.name();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; params.length; index++) {</span><br><span class="line">                allParams[<span class="number">1</span> + index] = params[index].toString();</span><br><span class="line">            }</span><br><span class="line">            Long result = redisTemplate.execute(rateLimitScript,</span><br><span class="line">                    Collections.singletonList(path),</span><br><span class="line">                    allParams);</span><br><span class="line">            <span class="keyword">return</span> LuaScriptResult.getResult(result);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> LuaScriptResult.ERROR;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">getInterval</span><span class="params">(<span class="keyword">int</span> qps)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000.0f</span> / qps;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>
<p>控制令牌产生的lua脚本如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">redis.replicate_commands()</span><br><span class="line"></span><br><span class="line">local Result = {SUCCESS=<span class="number">1</span>,DEFEAT=<span class="number">0</span>,LIMITED=-<span class="number">1</span>}</span><br><span class="line"></span><br><span class="line">local token_bucket_info = redis.pcall(<span class="string">'HMGET'</span>,KEYS[<span class="number">1</span>],<span class="string">'bucket_max_size'</span>,<span class="string">'interval'</span>,<span class="string">'token'</span>,<span class="string">'timestamp'</span>)</span><br><span class="line"></span><br><span class="line">local bucket_max_size = tonumber(token_bucket_info[<span class="number">1</span>])</span><br><span class="line">local interval = tonumber(token_bucket_info[<span class="number">2</span>])</span><br><span class="line">local token = tonumber(token_bucket_info[<span class="number">3</span>])</span><br><span class="line">local timestamp = token_bucket_info[<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">local method = ARGV[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">local curr_time_arr = redis.call(<span class="string">'TIME'</span>)</span><br><span class="line">local curr_timestamp = curr_time_arr[<span class="number">1</span>] * <span class="number">1000</span> + math.floor(curr_time_arr[<span class="number">2</span>]/<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> method == <span class="string">'init'</span> then</span><br><span class="line">    <span class="keyword">if</span>(type(timestamp) ~=<span class="string">'boolean'</span> and timestamp ~=nil) then</span><br><span class="line">        <span class="keyword">return</span> Result.SUCCESS</span><br><span class="line">    end</span><br><span class="line">    redis.pcall(<span class="string">'HMSET'</span>, KEYS[<span class="number">1</span>],</span><br><span class="line">        <span class="string">'bucket_max_size'</span>, ARGV[<span class="number">2</span>],</span><br><span class="line">        <span class="string">'interval'</span>, ARGV[<span class="number">3</span>],</span><br><span class="line">        <span class="string">'token'</span>, ARGV[<span class="number">4</span>],</span><br><span class="line">        <span class="string">'timestamp'</span>, curr_timestamp)</span><br><span class="line">    <span class="keyword">return</span> Result.SUCCESS</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> method == <span class="string">'modify'</span> then</span><br><span class="line">    <span class="keyword">if</span>(type(timestamp)==<span class="string">'boolean'</span> and timestamp==nil) then</span><br><span class="line">        <span class="keyword">return</span> Result.DEFEAT</span><br><span class="line">    end</span><br><span class="line">    redis.pcall(<span class="string">'HMSET'</span>, KEYS[<span class="number">1</span>],</span><br><span class="line">        <span class="string">'bucket_max_size'</span>, ARGV[<span class="number">2</span>],</span><br><span class="line">        <span class="string">'interval'</span>, ARGV[<span class="number">3</span>])</span><br><span class="line">    <span class="keyword">return</span> Result.SUCCESS</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> method == <span class="string">'delete'</span> then</span><br><span class="line">    <span class="keyword">if</span>(type(timestamp) ==<span class="string">'boolean'</span> or timestamp ==nil) then</span><br><span class="line">        <span class="keyword">return</span> Result.SUCCESS</span><br><span class="line">    end</span><br><span class="line">    redis.pcall(<span class="string">'DEL'</span>, KEYS[<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> Result.SUCCESS</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> method == <span class="string">'acquire'</span> then</span><br><span class="line">    <span class="keyword">if</span>(type(timestamp) ==<span class="string">'boolean'</span> or timestamp ==nil) then</span><br><span class="line">        <span class="keyword">return</span> Result.SUCCESS</span><br><span class="line">    end</span><br><span class="line">    --获取认证消耗的令牌数</span><br><span class="line">    local acquire_token = tonumber(ARGV[<span class="number">2</span>])</span><br><span class="line">    --计算当前时间与上一次认证的时间差内改产生的令牌数</span><br><span class="line">    local reserve_token = math.max(<span class="number">0</span>, math.floor((curr_timestamp - timestamp) / interval))</span><br><span class="line">    --如果超出桶的最大令牌数，则抛弃</span><br><span class="line">    local curr_token = math.min(bucket_max_size, token + reserve_token)</span><br><span class="line">    local result = Result.LIMITED</span><br><span class="line">    --如果桶中令牌数量够则放行</span><br><span class="line">    <span class="keyword">if</span> curr_token &gt;= acquire_token then</span><br><span class="line">        result = Result.SUCCESS</span><br><span class="line">        curr_token = curr_token - acquire_token</span><br><span class="line">    end</span><br><span class="line">    --更新当前桶中的令牌数量</span><br><span class="line">    redis.pcall(<span class="string">'HSET'</span>, KEYS[<span class="number">1</span>], <span class="string">'token'</span>, curr_token)</span><br><span class="line">    --如果这次有放入令牌，则更新时间</span><br><span class="line">    <span class="keyword">if</span> reserve_token &gt; <span class="number">0</span> then</span><br><span class="line">        redis.pcall(<span class="string">'HSET'</span>, KEYS[<span class="number">1</span>], <span class="string">'timestamp'</span>, curr_timestamp)</span><br><span class="line">    end</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure>
<p>acquire方法里面 acquire_token传值是1（即每次访问消耗令牌数1），更新时间差与interval比值产生对应令牌数，如果桶里面令牌大于acquire_token，则放行，返回Result.SUCCESS，完成接口访问速率的控制。</p>
<h4 id="用户总访问次数控制过滤器"><a class="header-anchor" href="#用户总访问次数控制过滤器">¶</a>用户总访问次数控制过滤器</h4>
<p>Order：Integer.MIN_VALUE+3</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCountFilter</span> <span class="keyword">implements</span> <span class="title">MyFilter</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserCountFilter</span><span class="params">(RedisTemplate&lt;String, String&gt; redisTemplate)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">noPassFilter</span><span class="params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> </span>{</span><br><span class="line"></span><br><span class="line">        ZSetOperations&lt;String, String&gt; zSet = redisTemplate.opsForZSet();</span><br><span class="line"></span><br><span class="line">        UserLimitEntity userLimitEntity = exchange.getAttribute(<span class="string">"userLimitEntity"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (userLimitEntity.notCountLimit()) {</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        String redisPath = RedisPath.USER_COUNT_LIMIT + exchange.getAttribute(<span class="string">"userId"</span>);</span><br><span class="line">        String md5Path = exchange.getAttribute(<span class="string">"md5Path"</span>);</span><br><span class="line"></span><br><span class="line">        Double count = zSet.incrementScore(redisPath, md5Path, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">1</span> &amp;&amp; userLimitEntity.getUsed() != <span class="number">0</span>) {</span><br><span class="line">            zSet.incrementScore(redisPath, md5Path, userLimitEntity.getUsed());</span><br><span class="line">        } <span class="keyword">else</span> <span class="keyword">if</span> (count &gt; userLimitEntity.getTotal()) {</span><br><span class="line">            zSet.incrementScore(redisPath, md5Path, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            Result limitedCount = <span class="keyword">new</span> Result(FailureResult.valueOf(<span class="string">"LIMITED_COUNT"</span>));</span><br><span class="line">            <span class="keyword">return</span> ResponseUtil.newResponse(exchange, limitedCount);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> Integer.MIN_VALUE + <span class="number">3</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>UserLimitEntity用户控制里面有个total，表示用户可以访问最大次数，上面过滤器进行访问值的判断，如果大于，返回FailureResult.valueOf(“LIMITED_COUNT”)，错误结果通过枚举形式把配置文件的自定义的错误码（下图），在前文提到的InitHandler类中进行加载。</p>
<p>FailureResult.properties:</p>
<p><img src="/images/loading.gif" data-original="failed-result.png" alt=""></p>
<h3 id="通过网关加载访问业务层"><a class="header-anchor" href="#通过网关加载访问业务层">¶</a>通过网关加载访问业务层</h3>
<p>经过上面过滤器，我们完成了对用户的鉴权和限流的设计和控制，之后正式进行业务层逻辑访问，本文完。</p>
<p>Gitlab：<a href="http://git.octodata.com.cn/jiangyunjun/open-api-gateway" target="_blank" rel="noopener">项目地址</a></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud-Gateway</tag>
        <tag>服务端编程</tag>
      </tags>
  </entry>
</search>
